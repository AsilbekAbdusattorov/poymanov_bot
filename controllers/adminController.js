const {
    USER_ROLES,
    CERTIFICATE_STATUS,
    ACTIONS,
  } = require("../utils/constants");
  const User = require("../models/User");
  const Certificate = require("../models/Certificate");
  const { generateCertificatePDF } = require("../services/pdfService");
  const BotService = require("../services/botService");
  const { Markup } = require("telegraf");
  const mongoose = require("mongoose");
  const fs = require("fs");
  const path = require("path");
  
  // Helper function to escape Markdown special characters
  function escapeMarkdown(text) {
    if (!text) return '';
    return text.toString().replace(/[_*[\]()~`>#+-=|{}.!]/g, '\\$&');
  }
  
  class AdminController {
    constructor(bot) {
      this.bot = bot;
      this.botService = new BotService(bot);
      this.rejectingCertificate = {};
    }
  
    initialize() {
      this.bot.command("admin", this.showAdminPanel.bind(this));
      this.bot.command("users", this.showUsersList.bind(this));
      this.bot.command("operators", this.showOperatorsList.bind(this));
      this.bot.command("pending", this.showPendingCertificates.bind(this));
      this.bot.command("stats", this.showStats.bind(this));
  
      this.bot.action(
        new RegExp(`^${ACTIONS.APPROVE_CERTIFICATE}:(.+)$`),
        this.approveCertificate.bind(this)
      );
      this.bot.action(
        new RegExp(`^${ACTIONS.REJECT_CERTIFICATE}:(.+)$`),
        this.startRejectCertificate.bind(this)
      );
      this.bot.action(
        new RegExp(`^${ACTIONS.ADD_OPERATOR}:(.+)$`),
        this.toggleOperatorRole.bind(this)
      );
      this.bot.action(
        new RegExp(`^${ACTIONS.REMOVE_OPERATOR}:(.+)$`),
        this.toggleOperatorRole.bind(this)
      );
      this.bot.action(
        new RegExp(`^${ACTIONS.BLOCK_USER}:(.+)$`),
        this.toggleUserBlockStatus.bind(this)
      );
      this.bot.action(
        new RegExp(`^${ACTIONS.UNBLOCK_USER}:(.+)$`),
        this.toggleUserBlockStatus.bind(this)
      );
  
      this.bot.use((ctx, next) => {
        if (this.rejectingCertificate[ctx.from.id]) {
          return this.handleRejectReason(ctx);
        }
        return next();
      });
    }
  
    async showAdminPanel(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const message =
          `üëÆ‚Äç‚ôÇÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n` +
          `/operators - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏\n` +
          `/pending - –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n` +
          `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã`;
  
        await ctx.replyWithMarkdown(message);
      } catch (error) {
        console.error("Admin panel error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
      }
    }
  
    async showUsersList(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const users = await User.find({ role: USER_ROLES.USER }).sort({ createdAt: -1 });
        if (users.length === 0) {
          return ctx.reply("‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        }
  
        await ctx.replyWithMarkdown(
          `üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${users.length}):*`
        );
  
        for (const user of users) {
          const status = user.isBlocked ? "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" : "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω";
          const escapedFirstName = escapeMarkdown(user.firstName);
          const escapedLastName = escapeMarkdown(user.lastName);
          const escapedUsername = escapeMarkdown(user.username);
  
          const message =
            `*${escapedFirstName}* ${escapedLastName}\n` +
            `@${escapedUsername || "–Ω–µ—Ç username"}\n` +
            `–°—Ç–∞—Ç—É—Å: ${status}\n` +
            `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${user.createdAt.toLocaleDateString()}`;
  
          const keyboard = Markup.inlineKeyboard([
            Markup.button.callback(
              "–°–¥–µ–ª–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
              `${ACTIONS.ADD_OPERATOR}:${user._id}`
            ),
            user.isBlocked
              ? Markup.button.callback(
                  "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                  `${ACTIONS.UNBLOCK_USER}:${user._id}`
                )
              : Markup.button.callback(
                  "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                  `${ACTIONS.BLOCK_USER}:${user._id}`
                ),
          ]);
  
          await ctx.replyWithMarkdown(message, keyboard);
          await ctx.reply("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }
      } catch (error) {
        console.error("Users list error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
      }
    }
  
    async showOperatorsList(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const operators = await User.find({ role: USER_ROLES.OPERATOR }).sort({ createdAt: -1 });
        if (operators.length === 0) {
          return ctx.reply("‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤");
        }
  
        // Get operator stats (certificate counts)
        const operatorStats = await Certificate.aggregate([
            { 
              $match: { 
                operatorId: { $in: operators.map(op => new mongoose.Types.ObjectId(op._id)) } 
              } 
            },
            { 
              $group: { 
                _id: "$operatorId", 
                total: { $sum: 1 },
                approved: { 
                  $sum: { 
                    $cond: [
                      { $eq: ["$status", CERTIFICATE_STATUS.APPROVED] }, 
                      1, 
                      0
                    ] 
                  } 
                } 
              } 
            }
          ]);
  
        const statsMap = operatorStats.reduce((acc, stat) => {
          acc[stat._id.toString()] = stat;
          return acc;
        }, {});
  
        await ctx.replyWithMarkdown(
          `üë®‚Äçüíª *–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (${operators.length}):*`
        );
  
        for (const operator of operators) {
          const status = operator.isBlocked ? "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" : "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω";
          const escapedFirstName = escapeMarkdown(operator.firstName);
          const escapedLastName = escapeMarkdown(operator.lastName);
          const escapedUsername = escapeMarkdown(operator.username);
          
          const stats = statsMap[operator._id.toString()] || { total: 0, approved: 0 };
          const approvalRate = stats.total > 0 
            ? Math.round((stats.approved / stats.total) * 100) 
            : 0;
  
          const message =
            `*${escapedFirstName}* ${escapedLastName}\n` +
            `@${escapedUsername || "–Ω–µ—Ç username"}\n` +
            `–°—Ç–∞—Ç—É—Å: ${status}\n` +
            `–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${stats.total} (${stats.approved} –æ–¥–æ–±—Ä–µ–Ω–æ, ${approvalRate}%)\n` +
            `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${operator.createdAt.toLocaleDateString()}`;
  
          const keyboard = Markup.inlineKeyboard([
            Markup.button.callback(
              "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
              `${ACTIONS.REMOVE_OPERATOR}:${operator._id}`
            ),
            operator.isBlocked
              ? Markup.button.callback(
                  "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                  `${ACTIONS.UNBLOCK_USER}:${operator._id}`
                )
              : Markup.button.callback(
                  "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                  `${ACTIONS.BLOCK_USER}:${operator._id}`
                ),
          ]);
  
          await ctx.replyWithMarkdown(message, keyboard);
          await ctx.reply("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }
      } catch (error) {
        console.error("Operators list error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤");
      }
    }
  
    async toggleOperatorRole(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const userId = ctx.match[1];
        const action = ctx.match[0].split(':')[0];
  
        if (!mongoose.Types.ObjectId.isValid(userId)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
  
        const user = await User.findById(userId);
        if (!user) {
          return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
  
        // Determine new role based on action
        const newRole = action === ACTIONS.ADD_OPERATOR 
          ? USER_ROLES.OPERATOR 
          : USER_ROLES.USER;
  
        // Skip if role is already set
        if (user.role === newRole) {
          return ctx.reply(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å ${newRole}`);
        }
  
        user.role = newRole;
        await user.save();
  
        const actionText = newRole === USER_ROLES.OPERATOR
          ? "–Ω–∞–∑–Ω–∞—á–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
          : "–ø–æ–Ω–∏–∂–µ–Ω –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
        
        await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${escapeMarkdown(user.username)} ${actionText}`);
  
        if (ctx.callbackQuery?.message) {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }
  
        // Notify the user about their new role
        await this.bot.telegram.sendMessage(
          user.telegramId,
          newRole === USER_ROLES.OPERATOR
            ? "üéâ –í–∞–º –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã."
            : "‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
        );
  
        // Update the lists
        if (newRole === USER_ROLES.OPERATOR) {
          await this.showOperatorsList(ctx);
        } else {
          await this.showUsersList(ctx);
        }
      } catch (error) {
        console.error("Role change error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }
    }
  
    async toggleUserBlockStatus(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const userId = ctx.match[1];
        const action = ctx.match[0].split(':')[0];
  
        if (!mongoose.Types.ObjectId.isValid(userId)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
  
        const user = await User.findById(userId);
        if (!user) {
          return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
  
        // Determine new status based on action
        const newStatus = action === ACTIONS.BLOCK_USER;
  
        // Skip if status is already set
        if (user.isBlocked === newStatus) {
          return ctx.reply(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ ${newStatus ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`);
        }
  
        user.isBlocked = newStatus;
        await user.save();
  
        const actionText = newStatus ? "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" : "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
        await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${escapeMarkdown(user.username)} ${actionText}`);
  
        if (ctx.callbackQuery?.message) {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }
  
        // Notify the user if they're being blocked
        if (newStatus) {
          await this.bot.telegram.sendMessage(
            user.telegramId,
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. " +
              "–î–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
          );
        }
  
        // Update the appropriate list based on user role
        if (user.role === USER_ROLES.OPERATOR) {
          await this.showOperatorsList(ctx);
        } else {
          await this.showUsersList(ctx);
        }
      } catch (error) {
        console.error("Block user error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      }
    }
  
    async showPendingCertificates(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const certificates = await Certificate.find({
          status: CERTIFICATE_STATUS.PENDING,
        })
          .populate("operatorId")
          .sort({ createdAt: 1 });
  
        if (certificates.length === 0) {
          return ctx.reply("‚ÑπÔ∏è –ù–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è");
        }
  
        await ctx.replyWithMarkdown(
          `‚è≥ *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ${certificates.length}*`
        );
  
        for (const cert of certificates) {
          const operator = cert.operatorId;
          const escapedFirstName = escapeMarkdown(operator.firstName);
          const escapedUsername = escapeMarkdown(operator.username);
  
          const message =
            `üìã *–ù–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç*\n\n` +
            `üë§ *–û–ø–µ—Ä–∞—Ç–æ—Ä:* ${escapedFirstName} @${escapedUsername}\n` +
            `üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${cert.createdAt.toLocaleString()}\n\n` +
            `üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* ${escapeMarkdown(cert.carBrand)} ${escapeMarkdown(cert.carModel)}\n` +
            `üî¢ *–ì–æ—Å–Ω–æ–º–µ—Ä:* ${escapeMarkdown(cert.licensePlate)}\n` +
            `üÜî *VIN:* ${escapeMarkdown(cert.vin)}\n` +
            `üìú *–ù–æ–º–µ—Ä —Ä—É–ª–æ–Ω–∞:* ${escapeMarkdown(cert.rollNumber)}`;
  
          await ctx.replyWithMarkdown(message);
  
          try {
            if (cert.rollPhoto) {
              await ctx.replyWithPhoto(cert.rollPhoto, {
                caption: "–§–æ—Ç–æ —Ä—É–ª–æ–Ω–∞",
              });
            }
            if (cert.carPhoto) {
              await ctx.replyWithPhoto(cert.carPhoto, {
                caption: "–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
              });
            }
          } catch (e) {
            console.error("Error sending photos:", e);
            await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ");
          }
  
          const keyboard = Markup.inlineKeyboard([
            Markup.button.callback(
              "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
              `${ACTIONS.APPROVE_CERTIFICATE}:${cert._id}`
            ),
            Markup.button.callback(
              "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
              `${ACTIONS.REJECT_CERTIFICATE}:${cert._id}`
            ),
          ]);
  
          await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
          await ctx.reply("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }
      } catch (error) {
        console.error("Pending certificates error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤");
      }
    }
  
    async showStats(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const [
          totalCertificates,
          pendingCertificates,
          approvedCertificates,
          rejectedCertificates,
        ] = await Promise.all([
          Certificate.countDocuments(),
          Certificate.countDocuments({ status: CERTIFICATE_STATUS.PENDING }),
          Certificate.countDocuments({ status: CERTIFICATE_STATUS.APPROVED }),
          Certificate.countDocuments({ status: CERTIFICATE_STATUS.REJECTED }),
        ]);
  
        const [totalUsers, operators, blockedUsers] = await Promise.all([
          User.countDocuments(),
          User.countDocuments({ role: USER_ROLES.OPERATOR }),
          User.countDocuments({ isBlocked: true }),
        ]);
  
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const newToday = await Certificate.countDocuments({
          createdAt: { $gte: today },
        });
  
        const message =
          `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n` +
          `üìã *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:*\n` +
          `‚Ä¢ –í—Å–µ–≥–æ: ${totalCertificates}\n` +
          `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${newToday}\n` +
          `‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${pendingCertificates}\n` +
          `‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${approvedCertificates}\n` +
          `‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${rejectedCertificates}\n\n` +
          `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n` +
          `‚Ä¢ –í—Å–µ–≥–æ: ${totalUsers}\n` +
          `‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${operators}\n` +
          `‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${blockedUsers}`;
  
        await ctx.replyWithMarkdown(message);
      } catch (error) {
        console.error("Stats error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
      }
    }
  
    async approveCertificate(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const certificateId = ctx.match[1];
  
        if (!mongoose.Types.ObjectId.isValid(certificateId)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
        }
  
        const certificate = await Certificate.findById(certificateId).populate(
          "operatorId"
        );
  
        if (!certificate) {
          return ctx.reply("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
  
        if (certificate.status !== CERTIFICATE_STATUS.PENDING) {
          return ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
        }
  
        const adminUser = await User.findOne({ telegramId: ctx.from.id });
        if (!adminUser) {
          return ctx.reply(
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
          );
        }
  
        certificate.status = CERTIFICATE_STATUS.APPROVED;
        certificate.adminId = adminUser._id;
        certificate.approvedAt = new Date();
        await certificate.save();
  
        try {
          const pdfPath = await generateCertificatePDF(certificate);
  
          await this.bot.telegram.sendDocument(
            certificate.operatorId.telegramId,
            { source: pdfPath },
            {
              caption: "üéâ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
              parse_mode: "Markdown",
            }
          );
  
          fs.unlink(pdfPath, (err) => {
            if (err) console.error("Error deleting temp PDF:", err);
          });
  
          await ctx.reply(
            "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É"
          );
        } catch (pdfError) {
          console.error("PDF generation error:", pdfError);
          await this.bot.telegram.sendMessage(
            certificate.operatorId.telegramId,
            "üéâ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n" +
              "‚ö†Ô∏è –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF —Ñ–∞–π–ª–∞."
          );
          await ctx.reply(
            "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π PDF"
          );
        }
  
        if (ctx.callbackQuery?.message) {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }
      } catch (error) {
        console.error("Certificate approval error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
      }
    }
  
    async startRejectCertificate(ctx) {
      try {
        const role = await this.botService.getUserRole(ctx);
        if (role !== USER_ROLES.ADMIN) {
          return ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        }
  
        const certificateId = ctx.match[1];
  
        if (!mongoose.Types.ObjectId.isValid(certificateId)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
        }
  
        this.rejectingCertificate[ctx.from.id] = certificateId;
  
        await ctx.reply(
          "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
        );
  
        if (ctx.callbackQuery?.message) {
          await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
        }
      } catch (error) {
        console.error("Start reject certificate error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      }
    }
  
    async handleRejectReason(ctx) {
      try {
        const userId = ctx.from.id;
        const certificateId = this.rejectingCertificate[userId];
  
        if (!certificateId) return;
  
        const reason = ctx.message.text.trim();
        if (!reason || reason.length < 5) {
          return ctx.reply(
            "‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤"
          );
        }
  
        delete this.rejectingCertificate[userId];
  
        if (!mongoose.Types.ObjectId.isValid(certificateId)) {
          return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
        }
  
        const certificate = await Certificate.findById(certificateId).populate(
          "operatorId"
        );
        if (!certificate) {
          return ctx.reply("‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
  
        if (certificate.status !== CERTIFICATE_STATUS.PENDING) {
          return ctx.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
        }
  
        const adminUser = await User.findOne({ telegramId: userId });
        if (!adminUser) {
          return ctx.reply(
            "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
          );
        }
  
        certificate.status = CERTIFICATE_STATUS.REJECTED;
        certificate.adminId = adminUser._id;
        certificate.rejectionReason = reason;
        await certificate.save();
  
        await this.bot.telegram.sendMessage(
          certificate.operatorId.telegramId,
          `‚ö†Ô∏è –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (${escapeMarkdown(certificate.carBrand)} ${escapeMarkdown(certificate.carModel)}, ${escapeMarkdown(certificate.licensePlate)}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n` +
            `*–ü—Ä–∏—á–∏–Ω–∞:* ${escapeMarkdown(reason)}\n\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.`,
          { parse_mode: "Markdown" }
        );
  
        await ctx.reply("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û–ø–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏—á–∏–Ω–µ.");
      } catch (error) {
        console.error("Certificate rejection error:", error);
        await ctx.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞");
      }
    }
  }
  
  module.exports = AdminController;