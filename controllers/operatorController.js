const { USER_ROLES, CERTIFICATE_STATUS } = require('../utils/constants');
const User = require('../models/User');
const Certificate = require('../models/Certificate');
const BotService = require('../services/botService');
const { Markup } = require('telegraf'); // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Markup

class OperatorController {
  constructor(bot) {
    this.bot = bot;
    this.botService = new BotService(bot);
    this.creatingCertificate = {};
  }

  initialize() {
    this.bot.command('create', this.startCertificateCreation.bind(this));
    this.bot.on('photo', this.handlePhotoUpload.bind(this));
    this.bot.on('text', this.handleTextInput.bind(this));
    this.bot.action('submit_certificate', this.submitCertificate.bind(this));
    this.bot.action('cancel_certificate', this.cancelCertificateCreation.bind(this));
  }

  async startCertificateCreation(ctx) {
    const role = await this.botService.getUserRole(ctx);
    if (role !== USER_ROLES.OPERATOR) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤');
    }
    
    this.creatingCertificate[ctx.from.id] = {
      step: 'carBrand',
      data: {}
    };
    
    await ctx.reply('üöó –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
  }

  async handleTextInput(ctx) {
    const userId = ctx.from.id;
    if (!this.creatingCertificate[userId]) return;
    
    const currentStep = this.creatingCertificate[userId].step;
    const text = ctx.message.text.trim();
    
    if (!text) {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    switch (currentStep) {
      case 'carBrand':
        if (text.length < 2 || text.length > 50) {
          return ctx.reply('–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        this.creatingCertificate[userId].data.carBrand = text;
        this.creatingCertificate[userId].step = 'carModel';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:');
        break;
        
      case 'carModel':
        if (text.length < 1 || text.length > 50) {
          return ctx.reply('–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        this.creatingCertificate[userId].data.carModel = text;
        this.creatingCertificate[userId].step = 'licensePlate';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, A123BC777):');
        break;
        
      case 'licensePlate':
        if (!/^[A-Za-z–ê-–Ø–∞-—è0-9]{4,15}$/.test(text)) {
          return ctx.reply('–ì–æ—Å–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 4 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)');
        }
        this.creatingCertificate[userId].data.licensePlate = text.toUpperCase();
        this.creatingCertificate[userId].step = 'vin';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ VIN-–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (17 —Å–∏–º–≤–æ–ª–æ–≤):');
        break;
        
      case 'vin':
        if (!/^[A-HJ-NPR-Z0-9]{17}$/i.test(text)) {
          return ctx.reply('VIN-–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 17 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –∫—Ä–æ–º–µ I, O, Q)');
        }
        this.creatingCertificate[userId].data.vin = text.toUpperCase();
        this.creatingCertificate[userId].step = 'rollNumber';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä—É–ª–æ–Ω–∞:');
        break;
        
      case 'rollNumber':
        if (text.length < 3 || text.length > 50) {
          return ctx.reply('–ù–æ–º–µ—Ä —Ä—É–ª–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        this.creatingCertificate[userId].data.rollNumber = text;
        this.creatingCertificate[userId].step = 'rollPhoto';
        await ctx.reply('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Ä—É–ª–æ–Ω–∞:');
        break;
    }
  }

  async handlePhotoUpload(ctx) {
    const userId = ctx.from.id;
    if (!this.creatingCertificate[userId]) return;
    
    const currentStep = this.creatingCertificate[userId].step;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const fileId = photo.file_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fileId –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
      if (currentStep === 'rollPhoto') {
        this.creatingCertificate[userId].data.rollPhoto = fileId;
        this.creatingCertificate[userId].step = 'carPhoto';
        await ctx.reply('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–∏–¥ —Å–ø–µ—Ä–µ–¥–∏):');
      } 
      else if (currentStep === 'carPhoto') {
        this.creatingCertificate[userId].data.carPhoto = fileId;
        
        const certData = this.creatingCertificate[userId].data;
        const summary = `üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:*\n\n` +
                       `üöó *–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å:* ${certData.carBrand} ${certData.carModel}\n` +
                       `üî¢ *–ì–æ—Å–Ω–æ–º–µ—Ä:* ${certData.licensePlate}\n` +
                       `üÜî *VIN:* ${certData.vin}\n` +
                       `üìú *–ù–æ–º–µ—Ä —Ä—É–ª–æ–Ω–∞:* ${certData.rollNumber}`;
        
        const keyboard = Markup.inlineKeyboard([
          Markup.button.callback('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', 'submit_certificate'),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', 'cancel_certificate')
        ]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Ñ–æ—Ç–æ
        if (certData.rollPhoto) {
          await ctx.replyWithPhoto(certData.rollPhoto, { caption: '–§–æ—Ç–æ —Ä—É–ª–æ–Ω–∞' });
        }
        
        await ctx.replyWithMarkdown(summary, keyboard);
      }
    } catch (error) {
      console.error('Error processing photo:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.');
    }
  }

  async submitCertificate(ctx) {
    const userId = ctx.from.id;
    if (!this.creatingCertificate[userId]) {
      return ctx.reply('‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    const certData = this.creatingCertificate[userId].data;
    const operator = await User.findOne({ telegramId: userId });
    
    if (!operator) {
      delete this.creatingCertificate[userId];
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —Ç–∞–∫–∏–º –≥–æ—Å–Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ VIN
      const existingCert = await Certificate.findOne({
        $or: [
          { licensePlate: certData.licensePlate },
          { vin: certData.vin }
        ]
      });
      
      if (existingCert) {
        let conflictField = '';
        if (existingCert.licensePlate === certData.licensePlate) conflictField = '–≥–æ—Å–Ω–æ–º–µ—Ä–æ–º';
        if (existingCert.vin === certData.vin) conflictField = 'VIN-–Ω–æ–º–µ—Ä–æ–º';
        
        return ctx.reply(`‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —Ç–∞–∫–∏–º ${conflictField} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
      }
      
      const certificate = new Certificate({
        operatorId: operator._id,
        ...certData,
        status: CERTIFICATE_STATUS.PENDING
      });
      
      await certificate.save();
      
      await ctx.replyWithMarkdown(
        '‚úÖ *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!*\n\n' +
        '–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.'
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const admins = await User.find({ role: USER_ROLES.ADMIN });
      for (const admin of admins) {
        await this.bot.telegram.sendMessage(
          admin.telegramId,
          `üì¢ –ù–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç @${operator.username}!\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pending –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.`
        );
      }
    } catch (error) {
      console.error('Certificate creation error:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
      delete this.creatingCertificate[userId];
    }
  }

  async cancelCertificateCreation(ctx) {
    const userId = ctx.from.id;
    if (this.creatingCertificate[userId]) {
      delete this.creatingCertificate[userId];
      await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await ctx.deleteMessage();
    }
  }
}

module.exports = OperatorController;