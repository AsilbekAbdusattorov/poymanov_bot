const { USER_ROLES } = require('../utils/constants');
const User = require('../models/User');
const Certificate = require('../models/Certificate');
const BotService = require('../services/botService');
const moment = require('moment');

class UserController {
  constructor(bot) {
    this.bot = bot;
    this.botService = new BotService(bot);
  }

  initialize() {
    this.bot.start(this.handleStart.bind(this));
    this.bot.command('check', this.checkCertificate.bind(this));
    this.bot.help(this.handleHelp.bind(this));
    this.bot.catch((err) => console.error('Bot error:', err));
  }

  async handleStart(ctx) {
    try {
      const userId = ctx.from.id;
      const username = ctx.from.username;
      const firstName = ctx.from.first_name;
      const lastName = ctx.from.last_name || '';
      
      let user = await User.findOne({ telegramId: userId });
      
      if (!user) {
        user = new User({
          telegramId: userId,
          username,
          firstName,
          lastName,
          role: USER_ROLES.USER
        });
        await user.save();
      }

      const role = await this.botService.getUserRole(ctx);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      if (user.role !== role && (role === USER_ROLES.ADMIN || role === USER_ROLES.OPERATOR)) {
        user.role = role;
        await user.save();
      }

      // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      if (role === USER_ROLES.ADMIN) {
        await ctx.replyWithMarkdown(`üëÆ‚Äç‚ôÇÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${firstName}!*`);
        await this.botService.sendAdminPanel(ctx);
      } 
      else if (role === USER_ROLES.OPERATOR) {
        await ctx.replyWithMarkdown(`üë®‚Äçüíª *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –û–ø–µ—Ä–∞—Ç–æ—Ä ${firstName}!*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤`);
        await this.botService.sendOperatorPanel(ctx);
      } 
      else {
        await ctx.replyWithMarkdown(`
      üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}!*
      
      –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. 
      
      üìå *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
      /check ABC123 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É
      /check 1HGCM82633A123456 - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ VIN-–Ω–æ–º–µ—Ä—É
      
      ‚ÑπÔ∏è –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
        `);
      }

    } catch (error) {
      console.error('Start error:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async checkCertificate(ctx) {
    try {
      const query = ctx.message.text.replace('/check', '').trim().toUpperCase();
      
      if (!query) {
        return ctx.reply('‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ –≥–æ—Å–Ω–æ–º–µ—Ä:\n/check ABC123');
      }

      const certificate = await Certificate.findOne({
        $or: [
          { licensePlate: query },
          { vin: query }
        ],
        status: 'approved'
      });

      if (!certificate) {
        return this.botService.sendCertificateNotFound(ctx, query);
      }

      await this.botService.sendCertificateDetails(ctx, certificate);

    } catch (error) {
      console.error('Check error:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');
    }
  }

  async handleHelp(ctx) {
    await this.botService.sendHelpMessage(ctx);
  }
}

module.exports = UserController;