const { Markup } = require('telegraf');
const config = require('../config');
const { 
  USER_ROLES, 
  COMMANDS,
  ACTIONS
} = require('../utils/constants');
const User = require('../models/User');
const Certificate = require('../models/Certificate');
const moment = require('moment');
const mongoose = require('mongoose');

class BotService {
  constructor(bot) {
    this.bot = bot;
  }

  async getUserRole(ctx) {
    try {
      const userId = ctx.from.id;
      
      // Check config first
      if (config.ADMIN_IDS.includes(userId.toString())) {
        return USER_ROLES.ADMIN;
      }
      
      if (config.OPERATOR_IDS.includes(userId.toString())) {
        return USER_ROLES.OPERATOR;
      }
      
      // Check database
      const user = await User.findOne({ telegramId: userId });
      return user ? user.role : USER_ROLES.USER;
    } catch (error) {
      console.error('Error getting user role:', error);
      return USER_ROLES.USER;
    }
  }

  async sendAdminPanel(ctx) {
    try {
      const keyboard = Markup.keyboard([
        [COMMANDS.USERS, COMMANDS.OPERATORS],
        [COMMANDS.PENDING, COMMANDS.STATS]
      ]).resize().oneTime();
      
      await ctx.reply('üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', keyboard);
    } catch (error) {
      console.error('Error sending admin panel:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
    }
  }

  async sendOperatorPanel(ctx) {
    try {
      const keyboard = Markup.keyboard([
        [COMMANDS.CREATE],
        [COMMANDS.HELP]
      ]).resize().oneTime();
      
      await ctx.reply('üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', keyboard);
    } catch (error) {
      console.error('Error sending operator panel:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
    }
  }

  async sendCertificateDetails(ctx, certificate) {
    try {
      const formattedDate = certificate.approvedAt 
        ? moment(certificate.approvedAt).format('DD.MM.YYYY HH:mm')
        : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      
      let message = `‚úÖ *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω!*\n\n`;
      message += `üöó *–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:* ${certificate.carBrand} ${certificate.carModel}\n`;
      message += `üî¢ *–ì–æ—Å–Ω–æ–º–µ—Ä:* ${certificate.licensePlate}\n`;
      message += `üÜî *VIN:* ${certificate.vin}\n`;
      message += `üìÖ *–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* ${formattedDate}\n`;
      message += `üìú *–ù–æ–º–µ—Ä —Ä—É–ª–æ–Ω–∞:* ${certificate.rollNumber}`;
      
      await ctx.replyWithMarkdown(message);
      
      if (certificate.carPhoto) {
        try {
          await ctx.replyWithPhoto(certificate.carPhoto, { caption: '–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
        } catch (e) {
          console.error('Error sending car photo:', e);
        }
      }
      
      if (certificate.rollPhoto) {
        try {
          await ctx.replyWithPhoto(certificate.rollPhoto, { caption: '–§–æ—Ç–æ —Ä—É–ª–æ–Ω–∞' });
        } catch (e) {
          console.error('Error sending roll photo:', e);
        }
      }
    } catch (error) {
      console.error('Error sending certificate details:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');
    }
  }

  async sendCertificateNotFound(ctx, query) {
    try {
      await ctx.replyWithMarkdown(
        `‚ùå *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!*\n` +
        `–ü–æ –∑–∞–ø—Ä–æ—Å—É: ${query}\n\n` +
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
      );
    } catch (error) {
      console.error('Error sending not found message:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

  async sendHelpMessage(ctx) {
    try {
      const role = await this.getUserRole(ctx);
      
      let message = `‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n`;
      message += `–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
        `/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n`;
      
      if (role === USER_ROLES.OPERATOR) {
        message += `\n–î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n` +
          `/create - –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n`;
      }
      
      if (role === USER_ROLES.ADMIN) {
        message += `\n–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n` +
          `/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n` +
          `/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
          `/operators - –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n` +
          `/pending - –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n` +
          `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
      }
      
      await ctx.replyWithMarkdown(message);
    } catch (error) {
      console.error('Error sending help message:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏');
    }
  }

  async sendOperatorStats(ctx, operatorId) {
    try {
      const stats = await Certificate.aggregate([
        { $match: { operatorId: new mongoose.Types.ObjectId(operatorId) } },
        { $group: { 
          _id: null,
          total: { $sum: 1 },
          approved: { 
            $sum: { 
              $cond: [{ $eq: ["$status", CERTIFICATE_STATUS.APPROVED] }, 1, 0] 
            } 
          },
          pending: {
            $sum: {
              $cond: [{ $eq: ["$status", CERTIFICATE_STATUS.PENDING] }, 1, 0]
            }
          }
        }}
      ]);

      const statData = stats[0] || { total: 0, approved: 0, pending: 0 };
      const approvalRate = statData.total > 0 
        ? Math.round((statData.approved / statData.total) * 100)
        : 0;

      const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:*\n\n` +
        `‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: ${statData.total}\n` +
        `‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: ${statData.approved} (${approvalRate}%)\n` +
        `‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${statData.pending}`;

      await ctx.replyWithMarkdown(message);
    } catch (error) {
      console.error('Error sending operator stats:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞');
    }
  }
}

module.exports = BotService;